plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    // PAPI
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    // Fast Async World Edit
    maven {
        name = "IntellectualSites Releases"
        url = uri("https://repo.maven.apache.org/content/repositories/releases/")
    }
    maven {
        name = "IntellectualSites Snapshots"
        url = uri("https://repo.maven.apache.org/content/repositories/snapshots/")
    }
}

dependencies {
    implementation project(path: ':common')
    compileOnly 'io.papermc.paper:paper-api:1.18.2-R0.1-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.10.10'
    compileOnly 'com.fastasyncworldedit:FastAsyncWorldEdit-Bukkit:2.2.0'
    compileOnly 'com.fastasyncworldedit:FastAsyncWorldEdit-Core:2.2.0'
    compileOnly('mysql:mysql-connector-java:8.0.29')
}


def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

// Add gradle project version to each version placeholder in sources
processResources {
    filter { String line -> line.replace('${version}', project.version.toString()) }
}

task processSources(type: Sync) {
    from sourceSets.main.java.srcDirs
    filter { String line -> line.replace('${version}', project.version.toString()) }
    into "$buildDir/src"
}

compileJava.source = processSources.outputs

// Shadow config
shadowJar {
    archiveFileName = 'VexelCore-Bukkit-' + project.version.toString() + '.jar'
    relocate('me.itsmcb.vexelcore.common.api', 'me.itsmcb.vexelcore.api') {}
}

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "libs" // Default value is "shadow"
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

artifacts {
    shadowJar
}

jar {
    enabled = true
    dependsOn(shadowJar)
}